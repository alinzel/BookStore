"""
Django settings for bookstore project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ct90b#w079vz0c0s=j*^)h!at4iyir8=hdow!tzi0x@emd%h#1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'books',
    'tinymce',  # 开发环境已经安装好tinymce
    'order',
    'comments',
    'users.templatetags.filters', # 过滤器功能
    'haystack', # Python写的搜索引擎
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'bookstore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'bookstore',
        'USER': 'root',
        'PASSWORD': 'qiulei1314',
        'HOST': '127.0.0.1',
        'PORT': 3306
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 600,
    'height': 400,
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'static')

# 使用redis缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",  # 使用django_redis缓存数据
        "LOCATION": "redis://127.0.0.1:6379/2",  # redis的IP加端口/2-->使用第二个数据库
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": ""  # 默认没有账号密码
        }
    }
}

# 将session的缓存写入redis,以提高性能
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# 支付宝的配置
ALIPAY_URL='https://openapi.alipaydev.com/gateway.do'

# TODO 同步发送邮件的功能的配置
# 设置邮件引擎
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 设置邮箱的服务器类型-->smtp
EMAIL_HOST = 'smtp.126.com'
# 设置邮箱端口
EMAIL_PORT = 25

# 发送邮件的邮箱
EMAIL_HOST_USER = 'Zwl18698035693@126.com'
# 在邮箱中设置的客户端授权密码-->TODO 在邮箱里设置,供第三方登录使用
EMAIL_HOST_PASSWORD = 'zhangwenlei15935'
# 收件人看到的发件人信息
EMAIL_FROM ='外星球<Zwl18698035693@126.com>'

# 全文检索配置
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎
        # 中文引擎
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 英文引擎
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

HAYSTACK_SEARCH_RESULTS_PER_PAGE = 4 # 指定搜索结果每页的条数

# 收集静态文件
STATIC_ROOT='/root/Zwl/BookStore/collect_static'
